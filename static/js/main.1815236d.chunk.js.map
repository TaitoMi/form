{"version":3,"sources":["components/Form.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["isRequired","validationSchema","Yup","shape","name","required","max","password","matches","min","repeatedPassword","oneOf","email","website","url","age","accept","Form","props","getResponse","data","a","fetch","method","headers","body","JSON","stringify","response","json","result","errorPointer","elem","message","newState","setState","state","successful","this","initialValues","skills","onSubmit","values","setSubmitting","newValues","filter","el","then","errorElem","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","className","htmlFor","placeholder","onChange","id","onBlur","value","Password","render","arrayHelpers","map","skill","index","newIndex","key","type","onClick","push","checked","loading","htmlType","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1815236d.chunk.js","sourcesContent":["import React from 'react';\nimport { Input, Button, Checkbox } from 'antd';\nimport 'antd/dist/antd.css';\nimport { Formik, FieldArray } from 'formik';\nimport * as Yup from 'yup';\n\nconst isRequired = 'Обязательное поле';\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .required(isRequired)\n    .max(50, 'Не более 50 символов'),\n  password: Yup.string()\n    .matches(/[0-9a-zA-Z]/, 'Пароль должен содержать латинские буквы')\n    .matches(/(?=.*[A-Z])/, 'Парольно должен содержать заглавную букву')\n    .matches(/(?=.*[0-9])/, 'Парольно должен содержать одну цифру')\n    .min(8, 'Не меньше 8')\n    .max(40, 'Не больше 40')\n    .required(isRequired),\n  repeatedPassword: Yup.string()\n    .oneOf([Yup.ref('password')], 'Пароли не совпадают')\n    .required(isRequired),\n  email: Yup.string()\n    .required(isRequired)\n    .email('Неправильный email адрес'),\n  website: Yup.string().url('Неправильная ссылка'),\n  age: Yup.number()\n    .required(isRequired)\n    .min(18, 'Не младше 18 лет')\n    .max(65, 'Не старше 65'),\n  accept: Yup.bool().oneOf([true], isRequired),\n});\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: null,\n      password: null,\n      repeatedPassword: null,\n      email: null,\n      website: null,\n      age: null,\n      accept: null,\n      successful: null,\n    };\n  }\n\n  getResponse = async data => {\n    // отправка данных на сервер\n    const response = await fetch('http://localhost:5000/sign-up', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data, null, 2),\n    });\n    const result = await response.json();\n    return result;\n  };\n\n  errorPointer = (elem, message) => {\n    const newState = {\n      name: null,\n      password: null,\n      repeatedPassword: null,\n      email: null,\n      website: null,\n      age: null,\n      accept: null,\n    };\n    newState[elem] = message;\n    this.setState({ ...newState });\n  };\n\n  render() {\n    const {\n      name,\n      password,\n      repeatedPassword,\n      email,\n      website,\n      age,\n      accept,\n      successful,\n    } = this.state;\n\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          password: '',\n          repeatedPassword: '',\n          email: '',\n          website: '',\n          skills: [''],\n          accept: false,\n        }}\n        validationSchema={validationSchema}\n        onSubmit={(values, { setSubmitting }) => {\n          setSubmitting(true);\n          const newValues = values;\n          newValues.skills = newValues.skills.filter(el => el !== '');\n          this.getResponse(newValues).then(({ errorElem, message }) => {\n            if (errorElem) {\n              this.errorPointer(errorElem, message);\n              setSubmitting(false);\n              return;\n            }\n            setSubmitting(false);\n            this.errorPointer('name', null);\n            this.setState({ successful: message });\n          });\n        }}\n      >\n        {({ values, errors, touched, handleChange, handleBlur, handleSubmit, isSubmitting }) => (\n          <form className=\"form\" onSubmit={handleSubmit}>\n            <div className=\"form__row\">\n              <span htmlFor=\"name\" className=\"form__label\">\n                Имя<span className=\"form__required\">*</span>:\n              </span>\n              <Input\n                placeholder=\"Введите имя\"\n                onChange={handleChange}\n                id=\"name\"\n                name=\"name\"\n                onBlur={handleBlur}\n                value={values.name}\n                className={`form__input ${\n                  (touched.name && errors.name) || name ? 'has-error' : null\n                }`}\n              />\n            </div>\n            {(touched.name && errors.name) || name ? (\n              <div className=\"input__error\">{errors.name || name}</div>\n            ) : null}\n            <div className=\"form__row\">\n              <span htmlFor=\"password\" className=\"form__label\">\n                Пароль<span className=\"form__required\">*</span>:\n              </span>\n              <Input.Password\n                placeholder=\"Введите пароль\"\n                onChange={handleChange}\n                id=\"password\"\n                name=\"password\"\n                onBlur={handleBlur}\n                value={values.password}\n                className={`form__input ${\n                  (touched.password && errors.password) || password ? 'has-error' : null\n                }`}\n              />\n            </div>\n            {(touched.password && errors.password) || password ? (\n              <div className=\"input__error\">{errors.password || password}</div>\n            ) : null}\n            <div className=\"form__row\">\n              <span htmlFor=\"repeatedPassword\" className=\"form__label\">\n                Еще раз<span className=\"form__required\">*</span>:\n              </span>\n              <Input.Password\n                placeholder=\"Повторите пароль\"\n                onChange={handleChange}\n                id=\"repeatedPassword\"\n                name=\"repeatedPassword\"\n                onBlur={handleBlur}\n                value={values.repeatedPassword}\n                className={`form__input ${\n                  (touched.repeatedPassword && errors.repeatedPassword) || repeatedPassword\n                    ? 'has-error'\n                    : null\n                }`}\n              />\n            </div>\n            {(touched.repeatedPassword && errors.repeatedPassword) || repeatedPassword ? (\n              <div className=\"input__error\">{errors.repeatedPassword || repeatedPassword}</div>\n            ) : null}\n            <div className=\"form__row\">\n              <span htmlFor=\"email\" className=\"form__label\">\n                Email<span className=\"form__required\">*</span>:\n              </span>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                placeholder=\"Введите email\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.email}\n                className={`form__input ${\n                  (touched.email && errors.email) || email ? 'has-error' : null\n                }`}\n              />\n            </div>\n            {(touched.email && errors.email) || email ? (\n              <div className=\"input__error\">{errors.email || email}</div>\n            ) : null}\n            <div className=\"form__row\">\n              <span htmlFor=\"website\" className=\"form__label\">\n                Website:\n              </span>\n              <Input\n                placeholder=\"Введите website\"\n                onChange={handleChange}\n                id=\"website\"\n                name=\"website\"\n                onBlur={handleBlur}\n                value={values.website}\n                className={`form__input ${\n                  (touched.website && errors.website) || website ? 'has-error' : null\n                }`}\n              />\n            </div>\n            {(touched.website && errors.website) || website ? (\n              <div className=\"input__error\">{errors.website || website}</div>\n            ) : null}\n            <div className=\"form__row\">\n              <span htmlFor=\"age\" className=\"form__label\">\n                Возраст<span className=\"form__required\">*</span>:\n              </span>\n              <Input\n                placeholder=\"Укажите возраст\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.age}\n                id=\"age\"\n                name=\"age\"\n                className={`form__input ${(touched.age && errors.age) || age ? 'has-error' : null}`}\n              />\n            </div>\n            {(touched.age && errors.age) || age ? (\n              <div className=\"input__error\">{errors.age || age}</div>\n            ) : null}\n            <FieldArray\n              name=\"skills\"\n              render={arrayHelpers => (\n                <div>\n                  {values.skills.map((skill, index) => {\n                    const newIndex = `skills-${index}`;\n                    return (\n                      <div key={newIndex} className=\"form__row\">\n                        <Input\n                          placeholder=\"Введите навык\"\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                          value={values.skills[index]}\n                          id={`skills${index}`}\n                          name={`skills.${index}`}\n                        />\n                      </div>\n                    );\n                  })}\n                  <Button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                    Добавить навык\n                  </Button>\n                </div>\n              )}\n            />\n            <Checkbox\n              onChange={handleChange}\n              onBlur={handleBlur}\n              checked={values.accept}\n              name=\"accept\"\n              id=\"accept\"\n              className=\"form__accept\"\n            >\n              Я принимаю условия<span className=\"form__required\">*</span>\n            </Checkbox>\n            {(touched.accept && errors.accept) || accept ? (\n              <div className=\"input__error\">{errors.accept || accept}</div>\n            ) : null}\n            <div>{successful}</div>\n            <Button\n              loading={isSubmitting}\n              className=\"form__submit-btn\"\n              htmlType=\"submit\"\n              type=\"primary\"\n            >\n              Зарегистрироваться\n            </Button>\n          </form>\n        )}\n      </Formik>\n    );\n  }\n}\n\nexport default Form;\n","import React from 'react';\nimport 'normalize.css';\nimport './styles/app.scss';\nimport Form from './components/Form';\n\nconst App = () => {\n  return <Form />;\n};\n\nexport default App;\n","/* eslint-disable */\r\n\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}