{"version":3,"sources":["components/Form.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["validationSchema","Yup","shape","name","required","max","password","matches","min","repeatedPassword","oneOf","email","website","url","age","accept","Form","initialValues","skills","onSubmit","values","console","log","alert","JSON","stringify","errors","touched","handleChange","handleBlur","handleSubmit","className","htmlFor","placeholder","onChange","id","onBlur","value","Password","render","arrayHelpers","map","skill","index","newIndex","key","type","onClick","push","checked","htmlType","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45c4e872.chunk.js","sourcesContent":["import React from 'react';\nimport { Input, Button, Checkbox } from 'antd';\nimport 'antd/dist/antd.css';\nimport { Formik, FieldArray } from 'formik';\nimport * as Yup from 'yup';\n// import PropTypes from 'prop-types';\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .required('Обязательное поле')\n    .max(50, 'Не более 50 символов'),\n  password: Yup.string()\n    .matches(\n      /(?=.*[0-9])(?=.*[A-Z])[0-9a-zA-Z]/,\n      'Пароль должен содержать латинские буквы, одну заглавную и цифру'\n    )\n    .min(8, 'Не меньше 8')\n    .max(40, 'Не больше 40')\n    .required(),\n  repeatedPassword: Yup.string()\n    .oneOf([Yup.ref('password')], 'Пароли не совпадают')\n    .required('Обязательное поле'),\n  email: Yup.string()\n    .required('Обязательное поле')\n    .email('Неправильный email адрес'),\n  website: Yup.string().url('Неправильная ссылка'),\n  age: Yup.number()\n    .required('Обязательное поле')\n    .min(18, 'Не младше 18 лет')\n    .max(65, 'Не старше 65'),\n  accept: Yup.bool('asdasd').required('Обязательное поле'),\n});\n\nconst Form = () => {\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        password: '',\n        repeatedPassword: '',\n        email: '',\n        website: '',\n        skills: [''],\n      }}\n      validationSchema={validationSchema}\n      onSubmit={values => {\n        console.log('work');\n        alert(JSON.stringify(values, null, 2));\n      }}\n    >\n      {({ values, errors, touched, handleChange, handleBlur, handleSubmit }) => (\n        <form className=\"form\" onSubmit={handleSubmit}>\n          <>{JSON.stringify(values, null, 2)}</>\n          <div className=\"form__row\">\n            <span htmlFor=\"name\" className=\"form__label\">\n              Имя<span className=\"form__required\">*</span>:\n            </span>\n            <Input\n              placeholder=\"Введите имя\"\n              onChange={handleChange}\n              id=\"name\"\n              name=\"name\"\n              onBlur={handleBlur}\n              value={values.name}\n              className={`form__input ${touched.name && errors.name ? 'has-error' : null}`}\n            />\n          </div>\n          {touched.name && errors.name ? <div className=\"input__error\">{errors.name}</div> : null}\n          <div className=\"form__row\">\n            <span htmlFor=\"password\" className=\"form__label\">\n              Пароль<span className=\"form__required\">*</span>:\n            </span>\n            <Input.Password\n              placeholder=\"Введите пароль\"\n              onChange={handleChange}\n              id=\"password\"\n              name=\"password\"\n              onBlur={handleBlur}\n              value={values.password}\n              className={`form__input ${touched.password && errors.password ? 'has-error' : null}`}\n            />\n          </div>\n          {touched.password && errors.password ? (\n            <div className=\"input__error\">{errors.password}</div>\n          ) : null}\n          <div className=\"form__row\">\n            <span htmlFor=\"repeatedPassword\" className=\"form__label\">\n              Еще раз<span className=\"form__required\">*</span>:\n            </span>\n            <Input.Password\n              placeholder=\"Повторите пароль\"\n              onChange={handleChange}\n              id=\"repeatedPassword\"\n              name=\"repeatedPassword\"\n              onBlur={handleBlur}\n              value={values.repeatedPassword}\n              className={`form__input ${\n                touched.repeatedPassword && errors.repeatedPassword ? 'has-error' : null\n              }`}\n            />\n          </div>\n          {touched.repeatedPassword && errors.repeatedPassword ? (\n            <div className=\"input__error\">{errors.repeatedPassword}</div>\n          ) : null}\n          <div className=\"form__row\">\n            <span htmlFor=\"email\" className=\"form__label\">\n              Email<span className=\"form__required\">*</span>:\n            </span>\n            <Input\n              id=\"email\"\n              name=\"email\"\n              placeholder=\"Введите email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n              className={`form__input ${touched.email && errors.email ? 'has-error' : null}`}\n            />\n          </div>\n          {touched.email && errors.email ? (\n            <div className=\"input__error\">{errors.email}</div>\n          ) : null}\n          <div className=\"form__row\">\n            <span htmlFor=\"website\" className=\"form__label\">\n              Website:\n            </span>\n            <Input\n              placeholder=\"Введите website\"\n              onChange={handleChange}\n              id=\"website\"\n              name=\"website\"\n              onBlur={handleBlur}\n              value={values.website}\n              className={`form__input ${touched.website && errors.website ? 'has-error' : null}`}\n            />\n          </div>\n          {touched.website && errors.website ? (\n            <div className=\"input__error\">{errors.website}</div>\n          ) : null}\n          <div className=\"form__row\">\n            <span htmlFor=\"age\" className=\"form__label\">\n              Возраст<span className=\"form__required\">*</span>:\n            </span>\n            <Input\n              placeholder=\"Укажите возраст\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.age}\n              id=\"age\"\n              name=\"age\"\n              className={`form__input ${touched.age && errors.age ? 'has-error' : null}`}\n            />\n          </div>\n          {touched.age && errors.age ? <div className=\"input__error\">{errors.age}</div> : null}\n          <FieldArray\n            name=\"skills\"\n            render={arrayHelpers => (\n              <div>\n                {values.skills.map((skill, index) => {\n                  const newIndex = `skills-${index}`;\n                  return (\n                    <div key={newIndex} className=\"form__row\">\n                      <Input\n                        placeholder=\"Введите навык\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.skills[index]}\n                        id={`skills${index}`}\n                        name={`skills.${index}`}\n                      />\n                    </div>\n                  );\n                })}\n                <Button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                  Добавить навык\n                </Button>\n              </div>\n            )}\n          />\n          <Checkbox\n            onChange={handleChange}\n            onBlur={handleBlur}\n            checked={values.accept}\n            name=\"accept\"\n            id=\"accept\"\n            className=\"form__accept\"\n          >\n            Я принимаю условия<span className=\"form__required\">*</span>\n          </Checkbox>\n          {touched.accept && errors.accept ? (\n            <div className=\"input__error\">{errors.accept}</div>\n          ) : null}\n          <Button className=\"form__submit-btn\" htmlType=\"submit\" type=\"primary\">\n            Зарегистрироваться\n          </Button>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\n// Form.defaultProps = {\n//   skills: [0],\n// };\n\n// Form.propTypes = {\n//   skills: PropTypes.arrayOf(PropTypes.number),\n// };\n\nexport default Form;\n","import React from 'react';\nimport 'normalize.css';\nimport './styles/app.scss';\nimport Form from './components/Form';\n\nconst App = () => {\n  return <Form />;\n};\n\nexport default App;\n","/* eslint-disable */\r\n\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}