{"version":3,"sources":["components/Field.jsx","components/FieldPassword.jsx","components/Form.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Field","label","change","idName","blur","value","touched","errors","elem","className","htmlFor","placeholder","onChange","id","name","onBlur","defaultProps","Password","isRequired","validationSchema","Yup","shape","required","max","password","matches","min","repeatedPassword","oneOf","email","website","url","age","accept","Form","props","getResponse","data","a","fetch","method","headers","body","JSON","stringify","response","json","result","errorPointer","message","newState","setState","state","successful","this","initialValues","skills","onSubmit","values","setSubmitting","newValues","filter","el","then","errorElem","handleChange","handleBlur","handleSubmit","isSubmitting","FieldPassword","render","arrayHelpers","map","skill","index","newIndex","key","type","onClick","push","checked","loading","htmlType","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4db45a24.chunk.js","sourcesContent":["import React from 'react';\nimport { Input } from 'antd';\nimport PropTypes from 'prop-types';\n\nconst Field = ({ label, change, idName, blur, value, touched, errors, elem }) => {\n  return (\n    <>\n      <div className=\"form__row\">\n        <span htmlFor=\"name\" className=\"form__label\">\n          {label}:\n        </span>\n        <Input\n          placeholder={`Введите ${label}`}\n          onChange={change}\n          id={idName}\n          name={idName}\n          onBlur={blur}\n          value={value}\n          className={`form__input ${(touched && errors) || elem ? 'has-error' : null}`}\n        />\n      </div>\n      {(touched && errors) || elem ? <div className=\"input__error\">{errors || elem}</div> : null}\n    </>\n  );\n};\n\nField.defaultProps = {\n  label: '',\n  idName: '',\n  value: '',\n  change: null,\n  blur: null,\n  touched: null,\n  errors: '',\n  elem: '',\n};\n\nField.propTypes = {\n  label: PropTypes.string,\n  idName: PropTypes.string,\n  value: PropTypes.string,\n  change: PropTypes.func,\n  blur: PropTypes.func,\n  touched: PropTypes.bool,\n  errors: PropTypes.string,\n  elem: PropTypes.string,\n};\n\nexport default Field;\n","import React from 'react';\nimport { Input } from 'antd';\n\nimport PropTypes from 'prop-types';\n\nconst Field = ({ label, change, idName, blur, value, touched, errors, elem }) => {\n  return (\n    <>\n      <div className=\"form__row\">\n        <span htmlFor=\"name\" className=\"form__label\">\n          {label}:\n        </span>\n        <Input.Password\n          placeholder={label}\n          onChange={change}\n          id={idName}\n          name={idName}\n          onBlur={blur}\n          value={value}\n          className={`form__input ${(touched && errors) || elem ? 'has-error' : null}`}\n        />\n      </div>\n      {(touched && errors) || elem ? <div className=\"input__error\">{errors || elem}</div> : null}\n    </>\n  );\n};\n\nField.defaultProps = {\n  label: '',\n  idName: '',\n  value: '',\n  change: null,\n  blur: null,\n  touched: null,\n  errors: '',\n  elem: '',\n};\n\nField.propTypes = {\n  label: PropTypes.string,\n  idName: PropTypes.string,\n  value: PropTypes.string,\n  change: PropTypes.func,\n  blur: PropTypes.func,\n  touched: PropTypes.bool,\n  errors: PropTypes.string,\n  elem: PropTypes.string,\n};\n\nexport default Field;\n","import React from 'react';\nimport { Input, Button, Checkbox } from 'antd';\nimport 'antd/dist/antd.css';\nimport { Formik, FieldArray } from 'formik';\nimport * as Yup from 'yup';\nimport Field from './Field';\nimport FieldPassword from './FieldPassword';\n\nconst isRequired = 'Обязательное поле';\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .required(isRequired)\n    .max(50, 'Не более 50 символов'),\n  password: Yup.string()\n    .matches(/[0-9a-zA-Z]/, 'Пароль должен содержать латинские буквы')\n    .matches(/(?=.*[A-Z])/, 'Парольно должен содержать заглавную букву')\n    .matches(/(?=.*[0-9])/, 'Парольно должен содержать одну цифру')\n    .min(8, 'Не меньше 8 символов')\n    .max(40, 'Не больше 40 символов')\n    .required(isRequired),\n  repeatedPassword: Yup.string()\n    .oneOf([Yup.ref('password')], 'Пароли не совпадают')\n    .required(isRequired),\n  email: Yup.string()\n    .required(isRequired)\n    .email('Неправильный email адрес'),\n  website: Yup.string().url('Неправильная ссылка'),\n  age: Yup.number()\n    .required(isRequired)\n    .min(18, 'Не младше 18 лет')\n    .max(65, 'Не старше 65'),\n  accept: Yup.bool().oneOf([true], isRequired),\n});\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: null,\n      password: null,\n      repeatedPassword: null,\n      email: null,\n      website: null,\n      age: null,\n      accept: null,\n      successful: null,\n    };\n  }\n\n  getResponse = async data => {\n    // отправка данных на сервер\n    const response = await fetch('http://localhost:5000/sign-up', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data, null, 2),\n    });\n    const result = await response.json();\n    return result;\n  };\n\n  errorPointer = (elem, message) => {\n    const newState = {\n      name: null,\n      password: null,\n      repeatedPassword: null,\n      email: null,\n      website: null,\n      age: null,\n      accept: null,\n    };\n    newState[elem] = message;\n    this.setState({ ...newState });\n  };\n\n  render() {\n    const {\n      name,\n      password,\n      repeatedPassword,\n      email,\n      website,\n      age,\n      accept,\n      successful,\n    } = this.state;\n\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          password: '',\n          repeatedPassword: '',\n          email: '',\n          website: '',\n          skills: [''],\n          accept: false,\n        }}\n        validationSchema={validationSchema}\n        onSubmit={(values, { setSubmitting }) => {\n          setSubmitting(true);\n          const newValues = values;\n          newValues.skills = newValues.skills.filter(el => el !== '');\n          this.getResponse(newValues).then(({ errorElem, message }) => {\n            if (errorElem) {\n              this.errorPointer(errorElem, message);\n              setSubmitting(false);\n              return;\n            }\n            setSubmitting(false);\n            this.errorPointer('name', null);\n            this.setState({ successful: message });\n          });\n        }}\n      >\n        {({ values, errors, touched, handleChange, handleBlur, handleSubmit, isSubmitting }) => (\n          <form className=\"form\" onSubmit={handleSubmit}>\n            <Field\n              label=\"Имя\"\n              change={handleChange}\n              blur={handleBlur}\n              idName=\"name\"\n              value={values.name}\n              touched={touched.name}\n              errors={errors.name}\n              elem={name}\n            />\n            <FieldPassword\n              label=\"Введите Пароль\"\n              change={handleChange}\n              blur={handleBlur}\n              idName=\"password\"\n              value={values.password}\n              touched={touched.password}\n              errors={errors.password}\n              elem={password}\n            />\n            <FieldPassword\n              label=\"Повторите пароль\"\n              change={handleChange}\n              blur={handleBlur}\n              idName=\"repeatedPassword\"\n              value={values.repeatedPassword}\n              touched={touched.repeatedPassword}\n              errors={errors.repeatedPassword}\n              elem={repeatedPassword}\n            />\n            <Field\n              label=\"Введите email\"\n              change={handleChange}\n              blur={handleBlur}\n              idName=\"email\"\n              value={values.email}\n              touched={touched.email}\n              errors={errors.email}\n              elem={email}\n            />\n            <Field\n              label=\"Введите website\"\n              change={handleChange}\n              blur={handleBlur}\n              idName=\"website\"\n              value={values.website}\n              touched={touched.website}\n              errors={errors.website}\n              elem={website}\n            />\n            <Field\n              label=\"Введите возраст\"\n              change={handleChange}\n              blur={handleBlur}\n              idName=\"age\"\n              value={values.age}\n              touched={touched.age}\n              errors={errors.age}\n              elem={age}\n            />\n            <FieldArray\n              name=\"skills\"\n              render={arrayHelpers => (\n                <div>\n                  {values.skills.map((skill, index) => {\n                    const newIndex = `skills-${index}`;\n                    return (\n                      <div key={newIndex} className=\"form__row\">\n                        <Input\n                          placeholder=\"Введите навык\"\n                          onChange={handleChange}\n                          onBlur={handleBlur}\n                          value={values.skills[index]}\n                          id={`skills${index}`}\n                          name={`skills.${index}`}\n                        />\n                      </div>\n                    );\n                  })}\n                  <Button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                    Добавить навык\n                  </Button>\n                </div>\n              )}\n            />\n            <Checkbox\n              onChange={handleChange}\n              onBlur={handleBlur}\n              checked={values.accept}\n              name=\"accept\"\n              id=\"accept\"\n              className=\"form__accept\"\n            >\n              Я принимаю условия<span className=\"form__required\">*</span>\n            </Checkbox>\n            {(touched.accept && errors.accept) || accept ? (\n              <div className=\"input__error\">{errors.accept || accept}</div>\n            ) : null}\n            <div>{successful}</div>\n            <Button\n              loading={isSubmitting}\n              className=\"form__submit-btn\"\n              htmlType=\"submit\"\n              type=\"primary\"\n            >\n              Зарегистрироваться\n            </Button>\n          </form>\n        )}\n      </Formik>\n    );\n  }\n}\n\nexport default Form;\n","import React from 'react';\nimport 'normalize.css';\nimport './styles/app.scss';\nimport Form from './components/Form';\n\nconst App = () => {\n  return <Form />;\n};\n\nexport default App;\n","/* eslint-disable */\r\n\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}