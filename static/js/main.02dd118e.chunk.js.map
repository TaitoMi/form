{"version":3,"sources":["components/Form.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["validationSchema","Yup","shape","name","required","max","age","min","email","website","url","accept","Form","skills","initialValues","password","repeatedPassword","values","errors","touched","handleChange","handleBlur","handleSubmit","className","onSubmit","htmlFor","placeholder","onChange","id","onBlur","value","htmlType","type","checked","defaultProps","App","props","state","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uVAOMA,EAAmBC,WAAaC,MAAM,CAC1CC,KAAMF,WACHG,SAAS,qGACTC,IAAI,GAAI,mGACXC,IAAKL,WACFG,SAAS,qGACTG,IAAI,GAAI,2EACRF,IAAI,GAAI,wDACXG,MAAOP,WACJG,SAAS,qGACTI,MAAM,iHACTC,QAASR,WAAaS,IAAI,iHAC1BC,OAAQV,SAAWG,SAAS,uGAGxBQ,EAAO,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACd,OACE,kBAAC,IAAD,CACEC,cAAe,CACbX,KAAM,GACNY,SAAU,GACVC,iBAAkB,GAClBR,MAAO,GACPC,QAAS,IAEXT,iBAAkBA,IAEjB,gBAAGiB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,aAAcC,EAA1C,EAA0CA,WAAYC,EAAtD,EAAsDA,aAAtD,OACC,0BAAMC,UAAU,OAAOC,SAAUF,GAC/B,oCAAGT,GACH,yBAAKU,UAAU,aACb,0BAAME,QAAQ,OAAOF,UAAU,eAA/B,uBAGA,kBAAC,IAAD,CACEG,YAAY,gEACZC,SAAUP,EACVQ,GAAG,OACHzB,KAAK,OACL0B,OAAQR,EACRS,MAAOb,EAAOd,KACdoB,UAAS,sBAAiBJ,EAAQhB,MAAQe,EAAOf,KAAO,YAAc,SAGzEgB,EAAQhB,MAAQe,EAAOf,KAAO,yBAAKoB,UAAU,gBAAgBL,EAAOf,MAAc,KACnF,yBAAKoB,UAAU,aACb,0BAAME,QAAQ,WAAWF,UAAU,eAAnC,yCAGA,kBAAC,IAAD,CACEG,YAAY,kFACZC,SAAUP,EACVQ,GAAG,WACHzB,KAAK,WACL0B,OAAQR,EACRS,MAAOb,EAAOF,SACdQ,UAAS,sBAAiBJ,EAAQJ,UAAYG,EAAOH,SAAW,YAAc,SAGjFI,EAAQJ,UAAYG,EAAOH,SAC1B,yBAAKQ,UAAU,gBAAgBL,EAAOH,UACpC,KACJ,yBAAKQ,UAAU,aACb,0BAAME,QAAQ,mBAAmBF,UAAU,eAA3C,0CAGA,kBAAC,IAAD,CACEG,YAAY,8FACZC,SAAUP,EACVQ,GAAG,mBACHzB,KAAK,mBACL0B,OAAQR,EACRS,MAAOb,EAAOD,iBACdO,UAAS,sBACPJ,EAAQH,kBAAoBE,EAAOF,iBAAmB,YAAc,SAIzEG,EAAQH,kBAAoBE,EAAOF,iBAClC,yBAAKO,UAAU,gBAAgBL,EAAOF,kBACpC,KACJ,yBAAKO,UAAU,aACb,0BAAME,QAAQ,QAAQF,UAAU,eAAhC,UAGA,kBAAC,IAAD,CACEK,GAAG,QACHzB,KAAK,QACLuB,YAAY,mDACZC,SAAUP,EACVS,OAAQR,EACRS,MAAOb,EAAOT,MACde,UAAS,sBAAiBJ,EAAQX,OAASU,EAAOV,MAAQ,YAAc,SAG3EW,EAAQX,OAASU,EAAOV,MACvB,yBAAKe,UAAU,gBAAgBL,EAAOV,OACpC,KACJ,yBAAKe,UAAU,aACb,0BAAME,QAAQ,UAAUF,UAAU,eAAlC,YAGA,kBAAC,IAAD,CACEG,YAAY,qDACZC,SAAUP,EACVQ,GAAG,UACHzB,KAAK,UACL0B,OAAQR,EACRS,MAAOb,EAAOR,QACdc,UAAS,sBAAiBJ,EAAQV,SAAWS,EAAOT,QAAU,YAAc,SAG/EU,EAAQV,SAAWS,EAAOT,QACzB,yBAAKc,UAAU,gBAAgBL,EAAOT,SACpC,KACJ,yBAAKc,UAAU,aACb,0BAAME,QAAQ,MAAMF,UAAU,eAA9B,+CAGA,kBAAC,IAAD,CACEG,YAAY,wFACZC,SAAUP,EACVS,OAAQR,EACRS,MAAOb,EAAOX,IACdsB,GAAG,MACHzB,KAAK,MACLoB,UAAS,sBAAiBJ,EAAQb,KAAOY,EAAOZ,IAAM,YAAc,SAGvEa,EAAQb,KAAOY,EAAOZ,IAAM,yBAAKiB,UAAU,gBAAgBL,EAAOZ,KAAa,KAChF,yBAAKiB,UAAU,aACb,0BAAME,QAAQ,MAAMF,UAAU,6BAA9B,yCAGA,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CACEG,YAAY,4EACZC,SAAUP,EACVQ,GAAG,SACHE,MAAOb,EAAOJ,OACdU,UAAU,gBAEZ,kBAAC,IAAD,CAAQQ,SAAS,SAASC,KAAK,UAA/B,qFAKJ,kBAAC,IAAD,CACEL,SAAUP,EACVS,OAAQR,EACRY,QAAShB,EAAON,OAChBR,KAAK,SACLyB,GAAG,SACHL,UAAU,gBANZ,sGAUA,kBAAC,IAAD,CAAQA,UAAU,mBAAmBQ,SAAS,SAASC,KAAK,WAA5D,qHASVpB,EAAKsB,aAAe,CAClBrB,OAAQ,CAAC,IAOID,QClKAuB,E,YAbb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXxB,OAAQ,CAAC,IAHM,E,sEAOT,IACAA,EAAWyB,KAAKD,MAAhBxB,OACR,OAAO,kBAAC,EAAD,CAAMA,OAAQA,Q,GAVP0B,IAAMC,WCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCdNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.02dd118e.chunk.js","sourcesContent":["import React from 'react';\nimport { Input, Button, Checkbox } from 'antd';\nimport 'antd/dist/antd.css';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .required('Обязательное поле')\n    .max(50, 'Не более 50 символов'),\n  age: Yup.number()\n    .required('Обязательное поле')\n    .min(18, 'Не младше 18 лет')\n    .max(65, 'Не старше 65'),\n  email: Yup.string()\n    .required('Обязательное поле')\n    .email('Неправильный email адрес'),\n  website: Yup.string().url('Неправильная ссылка'),\n  accept: Yup.bool().required('Обязательное поле'),\n});\n\nconst Form = ({ skills }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        password: '',\n        repeatedPassword: '',\n        email: '',\n        website: '',\n      }}\n      validationSchema={validationSchema}\n    >\n      {({ values, errors, touched, handleChange, handleBlur, handleSubmit }) => (\n        <form className=\"form\" onSubmit={handleSubmit}>\n          <>{skills}</>\n          <div className=\"form__row\">\n            <span htmlFor=\"name\" className=\"form__label\">\n              Имя:\n            </span>\n            <Input\n              placeholder=\"Введите имя\"\n              onChange={handleChange}\n              id=\"name\"\n              name=\"name\"\n              onBlur={handleBlur}\n              value={values.name}\n              className={`form__input ${touched.name && errors.name ? 'has-error' : null}`}\n            />\n          </div>\n          {touched.name && errors.name ? <div className=\"input__error\">{errors.name}</div> : null}\n          <div className=\"form__row\">\n            <span htmlFor=\"password\" className=\"form__label\">\n              Пароль:\n            </span>\n            <Input\n              placeholder=\"Введите пароль\"\n              onChange={handleChange}\n              id=\"password\"\n              name=\"password\"\n              onBlur={handleBlur}\n              value={values.password}\n              className={`form__input ${touched.password && errors.password ? 'has-error' : null}`}\n            />\n          </div>\n          {touched.password && errors.password ? (\n            <div className=\"input__error\">{errors.password}</div>\n          ) : null}\n          <div className=\"form__row\">\n            <span htmlFor=\"repeatedPassword\" className=\"form__label\">\n              Еще раз:\n            </span>\n            <Input\n              placeholder=\"Повторите пароль\"\n              onChange={handleChange}\n              id=\"repeatedPassword\"\n              name=\"repeatedPassword\"\n              onBlur={handleBlur}\n              value={values.repeatedPassword}\n              className={`form__input ${\n                touched.repeatedPassword && errors.repeatedPassword ? 'has-error' : null\n              }`}\n            />\n          </div>\n          {touched.repeatedPassword && errors.repeatedPassword ? (\n            <div className=\"input__error\">{errors.repeatedPassword}</div>\n          ) : null}\n          <div className=\"form__row\">\n            <span htmlFor=\"email\" className=\"form__label\">\n              Email:\n            </span>\n            <Input\n              id=\"email\"\n              name=\"email\"\n              placeholder=\"Введите email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n              className={`form__input ${touched.email && errors.email ? 'has-error' : null}`}\n            />\n          </div>\n          {touched.email && errors.email ? (\n            <div className=\"input__error\">{errors.email}</div>\n          ) : null}\n          <div className=\"form__row\">\n            <span htmlFor=\"website\" className=\"form__label\">\n              Website:\n            </span>\n            <Input\n              placeholder=\"Введите website\"\n              onChange={handleChange}\n              id=\"website\"\n              name=\"website\"\n              onBlur={handleBlur}\n              value={values.website}\n              className={`form__input ${touched.website && errors.website ? 'has-error' : null}`}\n            />\n          </div>\n          {touched.website && errors.website ? (\n            <div className=\"input__error\">{errors.website}</div>\n          ) : null}\n          <div className=\"form__row\">\n            <span htmlFor=\"age\" className=\"form__label\">\n              Возраст:\n            </span>\n            <Input\n              placeholder=\"Укажите возраст\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.age}\n              id=\"age\"\n              name=\"age\"\n              className={`form__input ${touched.age && errors.age ? 'has-error' : null}`}\n            />\n          </div>\n          {touched.age && errors.age ? <div className=\"input__error\">{errors.age}</div> : null}\n          <div className=\"form__row\">\n            <span htmlFor=\"age\" className=\"form__label label__skills\">\n              Навыки:\n            </span>\n            <div className=\"form__skills\">\n              <Input\n                placeholder=\"Укажите навык\"\n                onChange={handleChange}\n                id=\"skills\"\n                value={values.skills}\n                className=\"form__input\"\n              />\n              <Button htmlType=\"button\" type=\"dashed\">\n                Добавить навык\n              </Button>\n            </div>\n          </div>\n          <Checkbox\n            onChange={handleChange}\n            onBlur={handleBlur}\n            checked={values.accept}\n            name=\"accept\"\n            id=\"accept\"\n            className=\"form__accept\"\n          >\n            Я принимаю условия\n          </Checkbox>\n          <Button className=\"form__submit-btn\" htmlType=\"submit\" type=\"primary\">\n            Зарегистрироваться\n          </Button>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nForm.defaultProps = {\n  skills: [0],\n};\n\nForm.propTypes = {\n  skills: PropTypes.arrayOf(PropTypes.number),\n};\n\nexport default Form;\n","import React from 'react';\nimport 'normalize.css';\nimport './styles/app.scss';\nimport Form from './components/Form';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      skills: [0],\n    };\n  }\n\n  render() {\n    const { skills } = this.state;\n    return <Form skills={skills} />;\n  }\n}\n\nexport default App;\n","/* eslint-disable */\r\n\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}